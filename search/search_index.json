{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Helical AI Docs","text":"<p>Welcome. Use the navigation to explore.</p>"},{"location":"00-overview/","title":"Helical AI Overview","text":"<p>A complete, organized, and repeatable way to capture math, code, experiments, IP, and publication for the Helical and Architect blend.</p>"},{"location":"10-math/math-spec/","title":"Triangle-of-Means Recurrence (Math Spec)","text":""},{"location":"10-math/math-spec/#purpose","title":"Purpose","text":"<p>Define the mathematical core used for state updates.</p>"},{"location":"10-math/math-spec/#definitions","title":"Definitions","text":"<ul> <li>Projection: \\(X_t = W_x H_{t-1} + b_x\\)</li> <li>Reception: \\(Y_t = W_y I_t + b_y\\)</li> <li>Base (error): \\(b_t = (Y_t - X_t)/2\\)</li> <li>Neutral (geometric mean): \\(a_t = \\exp(0.5(\\ln(|X_t|+\\epsilon)+\\ln(|Y_t|+\\epsilon)))\\)</li> <li>Carrier (arithmetic mean): \\(c_t = (Y_t + X_t)/2\\)</li> </ul>"},{"location":"10-math/math-spec/#rotation-phase","title":"Rotation / Phase","text":"<ul> <li>Phase increment: \\(\\Delta \\phi_t \\in \\{5,7,11,13\\}\\times 2\\pi/24\\), or learned variant.</li> <li>Rotation operator: define block-rotations or unitary update here.</li> </ul>"},{"location":"10-math/math-spec/#update-rule","title":"Update Rule","text":"<p>State proposal: \\(z_t = f([b_t,a_t,c_t])\\). Final: \\(H_t = g( R_{\\Delta \\phi_t}(z_t), H_{t-1})\\).</p>"},{"location":"10-math/math-spec/#coherence-objective","title":"Coherence Objective","text":"<p>\\(\\mathcal{L}_{coh} = \\mathbb{E}[gate(b_t)\\cdot (1-\\cos(H_{t-1},H_t))]\\)</p>"},{"location":"10-math/phase-rotation/","title":"Phase and Rotation Schedule","text":"<ul> <li>Quasi-prime wheel: steps = [5,7,11,13] over 24.</li> <li>Learned offset: small MLP of \\(\\|b_t\\|, \\|a_t\\|, \\|c_t\\|\\).</li> <li>Alternatives: sinusoidal, Sobol or Halton discretizations.</li> <li>Justification: non-aliasing and long horizon recall.</li> </ul>"},{"location":"20-architecture/api-helicalcell/","title":"API: HelicalCell (PyTorch)","text":""},{"location":"20-architecture/api-helicalcell/#constructor","title":"Constructor","text":"<p><code>HelicalCell(dim, phase_mode=\"qprime|learned\", coherence_lambda=0.0, ...)</code></p>"},{"location":"20-architecture/api-helicalcell/#forwardh_t-1-i_t-h_t-aux","title":"forward(H_{t-1}, I_t) -&gt; H_t, aux","text":"<ul> <li>aux: {phi, dphi, stats}</li> </ul>"},{"location":"20-architecture/api-helicalcell/#training-hooks","title":"Training Hooks","text":"<ul> <li>coherence_loss(h_prev, h_curr, b_t)</li> </ul>"},{"location":"20-architecture/arch-spec/","title":"Helical Cell Architecture","text":"<p>This document defines the HelicalCell: a recurrent update built on a triangle\u2011of\u2011means kernel and a phase/rotation module. It explains inputs/outputs, internal blocks, variants, and training hooks so the implementation is unambiguous.</p>"},{"location":"20-architecture/arch-spec/#1-interfaces","title":"1) Interfaces","text":"<p>Inputs - <code>H_{t-1}</code> (tensor): previous hidden state, shape <code>[B, D]</code> - <code>I_t</code> (tensor): current input, shape <code>[B, D_in]</code></p> <p>Outputs - <code>H_t</code> (tensor): next hidden state, shape <code>[B, D]</code> - <code>aux</code> (dict): <code>{phi, dphi, stats}</code> for logging/analysis</p>"},{"location":"20-architecture/arch-spec/#2-core-math-triangle-of-means-rotation","title":"2) Core math (triangle-of-means + rotation)","text":""},{"location":"20-architecture/arch-spec/#21-projectionreception-maps","title":"2.1 Projection/Reception maps","text":"<ul> <li>\\( X_t = W_x H_{t-1} + b_x \\)</li> <li>\\( Y_t = W_y I_t + b_y \\)</li> </ul>"},{"location":"20-architecture/arch-spec/#22-triangle-of-means-channels","title":"2.2 Triangle-of-means channels","text":"<ul> <li>Base / error: \\( b_t = \\tfrac{1}{2}(Y_t - X_t) \\)</li> <li>Neutral / geometric mean (log-domain for stability): \\( a_t = \\exp\\left[0.5\\left(\\ln(|X_t|+\\epsilon)+\\ln(|Y_t|+\\epsilon)\\right)\\right] \\)</li> <li>Carrier / arithmetic mean: \\( c_t = \\tfrac{1}{2}(Y_t + X_t) \\)</li> </ul> <p>Concatenate (or affine combine) into a proposal: - \\( z_t = \\mathrm{Affine}([b_t, a_t, c_t]) \\)</p>"},{"location":"20-architecture/arch-spec/#23-phase-rotation","title":"2.3 Phase / rotation","text":"<ul> <li>Phase step (quasi-prime wheel): \\(\\Delta\\phi \\in \\{5,7,11,13\\}\\cdot 2\\pi/24\\)</li> <li>(Optional) learned offset: \\( \\delta\\phi = \\mathrm{MLP}(\\mathrm{stats}(b_t,a_t,c_t)) \\in [-\\pi/12,\\pi/12] \\)</li> <li>Effective step: \\( \\Delta\\phi_t = \\Delta\\phi + \\delta\\phi \\)</li> </ul> <p>Apply rotation <code>R(\u0394\u03c6_t)</code> to a chosen carrier (e.g., a block\u2011Givens on <code>z_t</code> or on a subset of <code>H_{t-1}</code>) to obtain a rotated state candidate \\( \\tilde{h}_t \\).</p>"},{"location":"20-architecture/arch-spec/#24-state-update","title":"2.4 State update","text":"<ul> <li>Normalize + residual:   \\( h_t = \\mathrm{Act}\\big(\\mathrm{RMSNorm}(z_t + U\\tilde{h}_t) + \\alpha \\tilde{h}_t\\big) \\)</li> <li>Output:   \\( H_t = h_t \\)</li> </ul>"},{"location":"20-architecture/arch-spec/#3-blocks-implementation-detail","title":"3) Blocks (implementation detail)","text":"<ul> <li>Linear maps: <code>W_x: D\u2192D</code>, <code>W_y: D_in\u2192D</code>, bias terms <code>b_x, b_y</code>.</li> <li>Triangle kernel: compute <code>b_t, a_t, c_t</code> (use <code>log1p</code>/<code>softplus</code> if you prefer).</li> <li>Rotation: vectorized Givens blocks or Cayley transform for orthogonality.</li> <li>Norms/Act: <code>RMSNorm</code> + <code>SiLU</code>/<code>GELU</code>; residual include small carrier skip (e.g., <code>\u03b1=0.1</code>).</li> <li>Stats for phase MLP: mean L1 of each channel; optionally channelwise norms.</li> </ul>"},{"location":"20-architecture/arch-spec/#4-variants","title":"4) Variants","text":"<ul> <li>Phase mode</li> <li><code>qprime</code>: fixed 24\u2011slot wheel \\([5,7,11,13]\\).</li> <li><code>learned</code>: add small learned offset \\(\\delta\\phi\\) with L2 prior to the wheel.</li> <li>Rotation type</li> <li><code>givens</code>: cheap 2\u00d72 block rotations (fast, stable).</li> <li><code>cayley</code>: skew\u2011sym A \u2192 \\(R=(I-A)(I+A)^{-1}\\) (orthogonal).</li> <li>Fusion</li> <li>Triangle AM/GM as above, or power\u2011mean with learnable \\(p\\in[-1,1]\\).</li> <li>Memory</li> <li>Optional phase\u2011keyed ring buffer: write <code>(k=[cos\u03c6,sin\u03c6], v=h)</code>; read nearest\u2011phase neighbors (tiny KV without full attention).</li> <li>Attention hybrid</li> <li>Phase\u2011gated attention: scale attention logits with \\(g(\\phi_t)=\\alpha\\cos(\\phi_t-\\phi_{pos})+\\beta\\).</li> <li>Late fusion head: <code>logits = \u03b1\u00b7Attn(h) + (1\u2212\u03b1)\u00b7Proj(h_helix)</code>.</li> </ul>"},{"location":"20-architecture/arch-spec/#5-training-hooks","title":"5) Training hooks","text":"<ul> <li>Loss: <code>total = task_loss + \u03bb\u00b7coherence_loss(h_{t-1}, h_t, b_t)</code></li> <li>Example gate: <code>gate = sigmoid(k*(\u03c4 - ||b_t||_1))</code> (regularize only when error is low).</li> <li>Compute coherence every <code>k</code> steps to save compute (e.g., <code>k=4</code>).</li> <li>Ablations</li> <li>\u0394\u03c6: qprime vs sinusoid vs learned</li> <li>Rotation: Givens vs Cayley</li> <li>Fusion: AM/GM vs power\u2011mean</li> <li>\u03bb: {0, .01, .05}</li> <li>Attention: off vs phase\u2011gated vs late\u2011fusion</li> <li>Metrics</li> <li>Horizon length (copy/reverse/parity), phase\u2011slip rate, PPL/accuracy, robustness under noise/dropouts.</li> </ul>"},{"location":"20-architecture/arch-spec/#6-shapes-complexity","title":"6) Shapes &amp; Complexity","text":"<ul> <li>Hidden <code>D</code>, input <code>D_in</code>; concat triangle makes <code>3D</code> before projection.</li> <li>Per\u2011step cost ~ O(D\u00b2) from linear maps; rotation is O(D) for block\u2011Givens.</li> <li>Memory constant in <code>T</code>; optional ring buffer is O(K) with tiny K (e.g., 64).</li> </ul>"},{"location":"20-architecture/arch-spec/#7-reference-config-starter","title":"7) Reference config (starter)","text":"<p>```yaml helical_cell:   dim: 512   phase_mode: qprime        # or learned   rotation: givens          # or cayley   coherence_lambda: 0.01   residual_alpha: 0.1   activation: gelu   eps: 1e-6</p>"},{"location":"30-implementation/bench-setup/","title":"Bench Setup","text":"<ul> <li>Tasks: copy, reverse, parity. Needle in a haystack. MIDI continuation. Tiny LM.</li> <li>Metrics: horizon length, phase slip rate, perplexity or accuracy.</li> <li>Ablations: \u0394\u03c6 schedule. \u03bb schedule. Rotation type. Head mixing.</li> </ul>"},{"location":"30-implementation/engineering-notes/","title":"Engineering Notes","text":"<ul> <li>Vectorization for rotations</li> <li>Log-domain geometric mean for stability</li> <li>Mixed precision notes</li> <li>torch.compile notes</li> </ul>"},{"location":"40-experiments/","title":"Experiment Logs","text":"<p>Add entries like <code>experiment-YYYYMMDD-&lt;slug&gt;.md</code> for every run. - 2025-08-24 \u2014 toy next-step prediction - 2025-08-24 \u2014 copy lag T=64 - 2025-08-24 \u2014 reverse T=48</p>"},{"location":"40-experiments/ablation-plan/","title":"Ablation Plan","text":"<ul> <li>\u0394\u03c6: qprime vs sinusoid vs learned</li> <li>Rotation: block Givens vs Cayley vs unitary</li> <li>Fusion: AM or GM vs power mean</li> <li>Coherence: \u03bb in {0, .01, .05}</li> <li>Attention: off vs phase gated vs hybrid head</li> </ul>"},{"location":"40-experiments/experiment-2025-08-24-baseline/","title":"Experiment 2025-08-24 \u2014 baseline","text":""},{"location":"40-experiments/experiment-2025-08-24-baseline/#goal","title":"Goal","text":"<p>Smoke test docs and repo, confirm site builds.</p>"},{"location":"40-experiments/experiment-2025-08-24-baseline/#config","title":"Config","text":"<p>n/a</p>"},{"location":"40-experiments/experiment-2025-08-24-baseline/#results","title":"Results","text":"<p>Site builds locally and deploys to gh-pages.</p>"},{"location":"40-experiments/experiment-2025-08-24-baseline/#observations","title":"Observations","text":"<p>Nav works. LaTeX renders.</p>"},{"location":"40-experiments/experiment-2025-08-24-baseline/#next","title":"Next","text":"<p>Add helical cell and run first synthetic task.</p>"},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/","title":"Experiment 2025-08-24 \u2014 copy-lag-T64","text":""},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/#commit","title":"Commit","text":"<p>30a1468</p>"},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/#goal","title":"Goal","text":""},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/#config","title":"Config","text":""},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/#results","title":"Results","text":""},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/#observations","title":"Observations","text":""},{"location":"40-experiments/experiment-2025-08-24-copy-lag-T64/#next","title":"Next","text":""},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/","title":"Experiment 2025-08-24 \u2014 reverse-T48","text":""},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/#commit","title":"Commit","text":"<p>30a1468</p>"},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/#goal","title":"Goal","text":""},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/#config","title":"Config","text":""},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/#results","title":"Results","text":""},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/#observations","title":"Observations","text":""},{"location":"40-experiments/experiment-2025-08-24-reverse-T48/#next","title":"Next","text":""},{"location":"40-experiments/experiment-2025-08-24-toy/","title":"Experiment YYYY-MM-DD \u2014 toy next-step prediction","text":""},{"location":"40-experiments/experiment-2025-08-24-toy/#goal","title":"Goal","text":"<p>Sanity-check HelicalCell v1 on a periodic signal.</p>"},{"location":"40-experiments/experiment-2025-08-24-toy/#config","title":"Config","text":"<ul> <li>dim=32, epochs=3, Adam lr=3e-3</li> </ul>"},{"location":"40-experiments/experiment-2025-08-24-toy/#results","title":"Results","text":"<ul> <li>Loss decreased across epochs on periodic synthetic data.</li> </ul>"},{"location":"40-experiments/experiment-2025-08-24-toy/#observations","title":"Observations","text":"<ul> <li>Training runs without errors; helical rotation + triangle-fusion is numerically stable at this scale.</li> </ul>"},{"location":"40-experiments/experiment-2025-08-24-toy/#next","title":"Next","text":"<ul> <li>Add copy/reverse/parity benchmarks.</li> <li>Try learned-phase \u0394\u03c6 and compare vs fixed.</li> </ul>"},{"location":"50-datasets/","title":"Dataset Cards","text":"<p>Document sources, licenses, splits, preprocessing, risks.</p>"},{"location":"60-results/figures/","title":"Figures","text":"<p>Place plots and figures under <code>docs/60-results/</code> and link them here.</p>"},{"location":"60-results/results/","title":"Results","text":"Task Baseline Helical v1 Helical v2 Copy-L=200 MIDI-long"},{"location":"70-compliance/risk-safety/","title":"Risk and Safety","text":"<ul> <li>Misuse scenarios</li> <li>Model limitations</li> <li>Evaluation methods for safety</li> <li>Red team notes</li> </ul>"},{"location":"80-ip/defensive-publication/","title":"Defensive Publication Outline","text":"<ul> <li>Abstract</li> <li>Method (equations and algorithms)</li> <li>Experimental evidence</li> <li>Limitations and future work</li> </ul>"},{"location":"80-ip/ip-log/","title":"IP Log","text":"<ul> <li>YYYY-MM-DD \u2014 Title \u2014 Inventor(s)</li> <li>Summary</li> <li>Novelty vs prior art</li> <li>Public disclosures (links or audiences)</li> <li>Decision: trade secret or provisional patent or defensive publication</li> </ul>"},{"location":"80-ip/patent-prep/","title":"Patent Preparation Notes","text":"<ul> <li>Claims sketch</li> <li>Flowcharts</li> <li>Enablement checklist</li> <li>Prior art list</li> </ul>"},{"location":"90-ops/how-we-work/","title":"How We Work","text":"<ul> <li>Branching and PRs</li> <li>Code review checklist</li> <li>Documentation Definition of Done</li> <li>Release cadence</li> </ul>"},{"location":"90-ops/milestones/","title":"Milestones &amp; History","text":"<p>This page lists releases and links to the exact code and docs for each milestone.</p>"},{"location":"90-ops/milestones/#v010-initial-scaffold-helicalcell-v1","title":"v0.1.0 \u2014 Initial scaffold + HelicalCell v1","text":"<ul> <li>Tag: v0.1.0</li> <li>Commit: (fill after tagging)</li> <li>Docs (this version): (optional if you later add versioned docs)</li> </ul>"},{"location":"90-ops/milestones/#upcoming","title":"Upcoming","text":"<ul> <li>v0.2.0 \u2014 Learned-phase \u0394\u03c6, copy/reverse benchmarks</li> </ul>"}]}